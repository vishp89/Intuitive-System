# .github/workflows/api-integration-test.yml
name: API Integration Test

on:
  issues:
    types: [opened]
  repository_dispatch:
    types: [dashboard-update, document-upload]

jobs:
  process-api-request:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '[DASHBOARD UPDATE]') || github.event_name == 'repository_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}
    
    - name: Parse update request
      id: parse
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          # API dispatch
          echo "kairos_progress=${{ github.event.client_payload.kairos_progress }}" >> $GITHUB_OUTPUT
          echo "ey_progress=${{ github.event.client_payload.ey_progress }}" >> $GITHUB_OUTPUT
          echo "beginning_progress=${{ github.event.client_payload.beginning_progress }}" >> $GITHUB_OUTPUT
          echo "bobo_progress=${{ github.event.client_payload.bobo_progress }}" >> $GITHUB_OUTPUT
          echo "bha_progress=${{ github.event.client_payload.bha_progress }}" >> $GITHUB_OUTPUT
          echo "portfolio_momentum=${{ github.event.client_payload.portfolio_momentum }}" >> $GITHUB_OUTPUT
          echo "todays_focus=${{ github.event.client_payload.todays_focus }}" >> $GITHUB_OUTPUT
        else
          # Issue-based trigger
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Extract values using grep and sed
          KAIROS=$(echo "$ISSUE_BODY" | grep "Kairos:" | sed 's/.*Kairos: *\([0-9]*\).*/\1/')
          EY=$(echo "$ISSUE_BODY" | grep "EY:" | sed 's/.*EY: *\([0-9]*\).*/\1/')
          BEGINNING=$(echo "$ISSUE_BODY" | grep "Beginning:" | sed 's/.*Beginning: *\([0-9]*\).*/\1/')
          BOBO=$(echo "$ISSUE_BODY" | grep "Bobo:" | sed 's/.*Bobo: *\([0-9]*\).*/\1/')
          BHA=$(echo "$ISSUE_BODY" | grep "BHA:" | sed 's/.*BHA: *\([0-9]*\).*/\1/')
          MOMENTUM=$(echo "$ISSUE_BODY" | grep "Portfolio:" | sed 's/.*Portfolio: *\([0-9]*\).*/\1/')
          FOCUS=$(echo "$ISSUE_BODY" | grep "Focus:" | sed 's/.*Focus: *\(.*\)/\1/')
          
          echo "kairos_progress=${KAIROS:-25}" >> $GITHUB_OUTPUT
          echo "ey_progress=${EY:-15}" >> $GITHUB_OUTPUT
          echo "beginning_progress=${BEGINNING:-5}" >> $GITHUB_OUTPUT
          echo "bobo_progress=${BOBO:-10}" >> $GITHUB_OUTPUT
          echo "bha_progress=${BHA:-30}" >> $GITHUB_OUTPUT
          echo "portfolio_momentum=${MOMENTUM:-20}" >> $GITHUB_OUTPUT
          echo "todays_focus=${FOCUS:-Strategic execution}" >> $GITHUB_OUTPUT
        fi
    
    - name: Update dashboard
      run: |
        python3 << 'EOF'
        import re
        
        # Read the HTML file
        with open('index.html', 'r') as file:
            content = file.read()
        
        # Get values from environment
        import os
        kairos_progress = os.environ.get('KAIROS_PROGRESS')
        ey_progress = os.environ.get('EY_PROGRESS')
        beginning_progress = os.environ.get('BEGINNING_PROGRESS')
        bobo_progress = os.environ.get('BOBO_PROGRESS')
        bha_progress = os.environ.get('BHA_PROGRESS')
        portfolio_momentum = os.environ.get('PORTFOLIO_MOMENTUM')
        todays_focus = os.environ.get('TODAYS_FOCUS')
        
        print(f"Updating with: Portfolio {portfolio_momentum}%, Kairos {kairos_progress}%, EY {ey_progress}%")
        
        # Update portfolio momentum value and bar
        content = re.sub(
            r'(id="momentum-value" class="text-3xl font-bold text-gray-900">)\d+(%</p>)',
            f'\\g<1>{portfolio_momentum}\\g<2>',
            content
        )
        content = re.sub(
            r'(id="momentum-bar"[^>]*style="width: )\d+(%")',
            f'\\g<1>{portfolio_momentum}\\g<2>',
            content
        )
        
        # Update today's focus
        content = re.sub(
            r'(<p class="text-lg opacity-90" id="todays-focus">)[^<]*(</p>)',
            f'\\g<1>{todays_focus}\\g<2>',
            content
        )
        
        # Update Kairos progress
        content = re.sub(
            r'(<span id="kairos-progress">)\d+(%</span>)',
            f'\\g<1>{kairos_progress}\\g<2>',
            content
        )
        
        # Update all progress bars - need to be more specific
        # First, find and replace Kairos progress bar (35%)
        content = re.sub(
            r'(progress-bar" style="width: )35(%">)',
            f'\\g<1>{kairos_progress}\\g<2>',
            content, count=1
        )
        
        # EY progress bar (60%) 
        content = re.sub(
            r'(progress-bar" style="width: )60(%">)',
            f'\\g<1>{ey_progress}\\g<2>',
            content, count=1
        )
        
        # Beginning progress bar (20%)
        content = re.sub(
            r'(progress-bar" style="width: )20(%">)',
            f'\\g<1>{beginning_progress}\\g<2>',
            content, count=1
        )
        
        # Bobo progress bar (15%)
        content = re.sub(
            r'(progress-bar" style="width: )15(%">)',
            f'\\g<1>{bobo_progress}\\g<2>',
            content, count=1
        )
        
        # BHA progress bar (40%)
        content = re.sub(
            r'(progress-bar" style="width: )40(%">)',
            f'\\g<1>{bha_progress}\\g<2>',
            content, count=1
        )
        
        # Add timestamp
        import datetime
        timestamp = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
        content = re.sub(
            r'(<p class="text-gray-600 mt-1">)[^<]*(</p>)',
            f'\\g<1>Last updated: {timestamp} â€¢ Real-time execution dashboard\\g<3>',
            content
        )
        
        # Write back
        with open('index.html', 'w') as file:
            file.write(content)
        
        print("Dashboard updated successfully")
        EOF
      env:
        KAIROS_PROGRESS: ${{ steps.parse.outputs.kairos_progress }}
        EY_PROGRESS: ${{ steps.parse.outputs.ey_progress }}
        BEGINNING_PROGRESS: ${{ steps.parse.outputs.beginning_progress }}
        BOBO_PROGRESS: ${{ steps.parse.outputs.bobo_progress }}
        BHA_PROGRESS: ${{ steps.parse.outputs.bha_progress }}
        PORTFOLIO_MOMENTUM: ${{ steps.parse.outputs.portfolio_momentum }}
        TODAYS_FOCUS: ${{ steps.parse.outputs.todays_focus }}
    
    - name: Commit changes
      run: |
        git config --local user.email "watson@portfolio.ai"
        git config --local user.name "Portfolio Watson"
        git add index.html
        
        if ! git diff --staged --quiet; then
          git commit -m "Watson update: Portfolio ${{ steps.parse.outputs.portfolio_momentum }}% | Kairos ${{ steps.parse.outputs.kairos_progress }}% | EY ${{ steps.parse.outputs.ey_progress }}% | Beginning ${{ steps.parse.outputs.beginning_progress }}% | Focus: ${{ steps.parse.outputs.todays_focus }}"
          git push
          echo "Dashboard updated and pushed"
        else
          echo "No changes to commit"
        fi
    
    - name: Close trigger issue
      if: github.event_name == 'issues'
      run: |
        # Close the trigger issue
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
          -d '{"state":"closed"}'
