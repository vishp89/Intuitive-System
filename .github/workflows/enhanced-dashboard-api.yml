name: Enhanced Dashboard API

on:
  issues:
    types: [opened]
  repository_dispatch:
    types: [dashboard-update, content-modify]
  workflow_dispatch:  

jobs:
  process-dashboard-request:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.title, '[DASHBOARD]') || contains(github.event.issue.title, '[CONTENT]') || github.event_name == 'repository_dispatch'    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_TOKEN }}
    
    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install requests beautifulsoup4
    
    - name: Parse request and update dashboard
      run: |
        python3 << 'EOF'
        import re
        import requests
        import json
        import os
        from datetime import datetime
        
        def get_sports_data(sport_type, league=None, team=None):
            """Flexible sports data fetcher"""
            try:
                if sport_type == 'baseball' and league == 'AL East':
                    url = "https://statsapi.mlb.com/api/v1/standings?leagueId=103&season=2024"
                    response = requests.get(url)
                    data = response.json()
                    
                    standings = []
                    for record in data['records'][0]['teamRecords'][:5]:
                        team_name = record['team']['name']
                        wins = record['wins']
                        losses = record['losses']
                        games_back = record.get('gamesBack', '0')
                        
                        is_favorite = team and team.lower() in team_name.lower()
                        standings.append({
                            'name': team_name,
                            'record': f"{wins}-{losses}",
                            'gb': games_back,
                            'favorite': is_favorite
                        })
                    
                    return {
                        'title': 'AL East Standings',
                        'emoji': '⚾',
                        'data': standings,
                        'note': f'Live standings • Go {team}!' if team else 'Live MLB standings'
                    }
                
                elif sport_type == 'basketball' and league == 'NBA Eastern':
                    return {
                        'title': 'NBA Eastern Conference',
                        'emoji': '🏀',
                        'data': [
                            {'name': 'Celtics', 'record': '50-15', 'gb': '0', 'favorite': True},
                            {'name': 'Heat', 'record': '44-21', 'gb': '6', 'favorite': False},
                            {'name': 'Bucks', 'record': '42-23', 'gb': '8', 'favorite': False}
                        ],
                        'note': f'Conference standings • Go {team}!' if team else 'Live NBA standings'
                    }
                
            except Exception as e:
                print(f"Error fetching {sport_type} data: {e}")
                return None
        
        def create_flexible_widget(widget_data, widget_id="sports-widget"):
            """Create HTML for any sports widget"""
            if not widget_data:
                return ""
                
            html = f'''
            <div id="{widget_id}" class="bg-white rounded-lg shadow-sm p-4 mb-4">
                <div class="flex items-center mb-2">
                    <span class="text-lg">{widget_data['emoji']}</span>
                    <h3 class="text-sm font-bold text-gray-900 ml-2">{widget_data['title']}</h3>
                </div>
                <div class="space-y-1">
            '''
            
            for i, team in enumerate(widget_data['data']):
                is_favorite = team.get('favorite', False)
                team_class = 'text-red-600 font-medium' if is_favorite else 'text-gray-700'
                html += f'''
                    <div class="flex justify-between text-xs {team_class}">
                        <span>{i+1}. {team['name']}</span>
                        <span>{team['record']} ({team['gb']} GB)</span>
                    </div>
                '''
            
            html += f'''
                </div>
                <p class="text-xs text-gray-500 mt-2">{widget_data['note']}</p>
            </div>
            '''
            return html
        
        # Get issue content
        issue_body = os.environ.get('GITHUB_EVENT_ISSUE_BODY', '')
        
        # Read HTML file
        with open('index.html', 'r') as file:
            content = file.read()
        
        # Parse progress updates
        progress_updates = {}
        for project in ['Kairos', 'EY', 'Beginning', 'Bobo', 'BHA', 'Portfolio']:
            match = re.search(f'{project}: *(\d+)', issue_body)
            if match:
                progress_updates[project.lower()] = match.group(1)
        
        focus_match = re.search(r'Focus: *(.+)', issue_body)
        if focus_match:
            progress_updates['focus'] = focus_match.group(1)
        
        # Update progress if found
        if progress_updates:
            print("Updating progress data...")
            
            if 'portfolio' in progress_updates:
                content = re.sub(
                    r'(id="momentum-value" class="text-3xl font-bold text-gray-900">\d+%)',
                    f'id="momentum-value" class="text-3xl font-bold text-gray-900">{progress_updates["portfolio"]}%',
                    content
                )
                content = re.sub(
                    r'(id="momentum-bar"[^>]*style="width: )\d+(%")',
                    f'\\1{progress_updates["portfolio"]}\\2',
                    content
                )
            
            if 'focus' in progress_updates:
                content = re.sub(
                    r'(<p class="text-lg opacity-90" id="todays-focus">)[^<]*(</p>)',
                    f'\\1{progress_updates["focus"]}\\2',
                    content
                )
        
        # Handle sports widgets
        if 'AL East' in issue_body or 'baseball' in issue_body or 'Red Sox' in issue_body:
            # Remove existing sports widget
            content = re.sub(
                r'<div id="sports-widget".*?</div>\s*',
                '',
                content,
                flags=re.DOTALL
            )
            
            # Add baseball widget
            sports_data = get_sports_data('baseball', 'AL East', 'Red Sox')
            if sports_data:
                widget_html = create_flexible_widget(sports_data)
                
                # Insert before today's focus
                insert_point = content.find('<div class="bg-gradient-to-r from-blue-600 to-purple-600')
                if insert_point != -1:
                    content = content[:insert_point] + widget_html + '\n            ' + content[insert_point:]
                    print("Added AL East standings widget")
        
        if 'basketball' in issue_body or 'NBA' in issue_body or 'Celtics' in issue_body:
            # Remove existing sports widget
            content = re.sub(
                r'<div id="sports-widget".*?</div>\s*',
                '',
                content,
                flags=re.DOTALL
            )
            
            # Add basketball widget
            sports_data = get_sports_data('basketball', 'NBA Eastern', 'Celtics')
            if sports_data:
                widget_html = create_flexible_widget(sports_data)
                
                # Insert before today's focus
                insert_point = content.find('<div class="bg-gradient-to-r from-blue-600 to-purple-600')
                if insert_point != -1:
                    content = content[:insert_point] + widget_html + '\n            ' + content[insert_point:]
                    print("Added NBA standings widget")
        
        if 'remove.*sports' in issue_body.lower() or 'remove.*baseball' in issue_body.lower():
            # Remove sports widget
            content = re.sub(
                r'<div id="sports-widget".*?</div>\s*',
                '',
                content,
                flags=re.DOTALL
            )
            print("Removed sports widget")
        
        # Update timestamp
        timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
        content = re.sub(
            r'(<p class="text-gray-600 mt-1">)[^<]*(</p>)',
            f'\\1Last updated: {timestamp} • Real-time execution dashboard\\2',
            content
        )
        
        # Write updated content
        with open('index.html', 'w') as file:
            file.write(content)
        
        print("Dashboard updated successfully")
        
        EOF
      env:
        GITHUB_EVENT_ISSUE_BODY: ${{ github.event.issue.body }}
    
    - name: Commit changes
      run: |
        git config --local user.email "watson@portfolio.ai"
        git config --local user.name "Portfolio Watson"
        git add index.html
        
        if ! git diff --staged --quiet; then
          git commit -m "Watson: Dashboard update with flexible content management"
          git push
          echo "Dashboard changes committed"
        else
          echo "No changes to commit"
        fi
    
    - name: Close trigger issue
      if: github.event_name == 'issues'
      run: |
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
          -d '{"state":"closed"}' || true
